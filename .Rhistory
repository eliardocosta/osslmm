# pkgbuild::compile_dll()
roxygen2::roxygenize()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testanto pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 2)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testanto pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 2)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
2E1
# testanto pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 2E1, pby = 1E1, prep = 2)
library(rstantools)
caminho_pacote <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/R package/osslmm"
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 2E1, pby = 1E1, prep = 2)
oss.lmm.mu(n = 10, c = 0.01, pmax = 2E2, pby = 1E1, prep = 1)
library(rstan)
rstan_options(auto_write = TRUE)
# Example
y <- rlmm(n = 20, p = 10, mu = 50, sig2 = 2, sig2a = 1)
rlmm <- function(n, p, mu, sig2, sig2a) {
a <- rnorm(p, 0, sqrt(sig2a))
subj <- rep(1:p, n)
y <- numeric(n*p)
for (i in 1:(n*p)) {
y[i] <- mu + a[subj[i]] + rnorm(1, 0, sqrt(sig2))
}
return(y)
}
# Example
y <- rlmm(n = 20, p = 10, mu = 50, sig2 = 2, sig2a = 1)
# generating a sample from the simples linear mixed model
n <- 20
p <- 10
data_stan <- list(N = n*p,
p = p,
subj = subj,
y = y,
mu0 = 0,
sig2mu = 1E1,
a1 = 2.1,
b1 = 4,
a2 = 2.1,
b2 = 4
)
subj <- rep(1:p, n)
data_stan <- list(N = n*p,
p = p,
subj = subj,
y = y,
mu0 = 0,
sig2mu = 1E1,
a1 = 2.1,
b1 = 4,
a2 = 2.1,
b2 = 4
)
path <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/lmm.stan"
modc <- stanc(file = path)
sm <- stan_model(stanc_ret = modc, verbose = FALSE)
fit <- sampling(sm, data = data_stan, chains = 2, iter = 200)
fit
pairs(fit, pars = c("mu", "sig2", "sig2a"))
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
stan_trace(fit, pars = c("mu", "sig2", "sig2a"))
fit$mu
fit2 <- extract(fit)
fit2$mu
stan_rhat(fit)
Rhat(fit2$mu)
fit2$mu
fit$mu
fit$'mu'
Rhat(fit$mu)
summary(fit)
summary(fit, pars = "mu")
summary(fit, pars = "mu")$summary
summary(fit, pars = "mu")$summary[10]
fit <- sampling(sm, data = data_stan, chains = 2, iter = 1E2, warmup = 5E2)
fit <- sampling(sm, data = data_stan, chains = 2, iter = 2E2, warmup = 2E2)
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 2E2)
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 2E2)
fit
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
stan_trace(fit, pars = c("mu", "sig2", "sig2a"))
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 250)
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 250,
pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 250,
pars = "mu")
fit
y
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 250,
pars = "mu")
fit
data_stan <- list(N = n*p,
p = p,
subj = subj,
y = y,
mu0 = 0,
sig2mu = 1E2,
a1 = 2.1,
b1 = 4,
a2 = 2.1,
b2 = 4
)
fit <- sampling(sm, data = data_stan, chains = 2, iter = 3E2, warmup = 250,
pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 3E2, warmup = 250,
pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 3E2, warmup = 250,
pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 4E2, warmup = 350,
pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 4E2, warmup = 350,
thin = 2,
pars = "mu")
fit
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
fit <- sampling(sm, data = data_stan, chains = 3, iter = 4E2, warmup = 350,
thin = 2)#,
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
#pars = "mu")
fit
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
stan_trace(fit, pars = c("mu", "sig2", "sig2a"))
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
fit <- sampling(sm, data = data_stan, chains = 3, iter = 4E2, warmup = 350,
thin = 2)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 5E2, warmup = 350,
thin = 2)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 5E2, warmup = 4E2,
thin = 2)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 5E2, warmup = 4E2,
thin = 2)#,
fit <- sampling(sm, data = data_stan, chains = 3, iter = 5E2, warmup = 4E2,
thin = 3)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 3, iter = 5E2, warmup = 4E2,
thin = 3)#,
fit <- sampling(sm, data = data_stan, chains = 3, iter = 5E2, warmup = 4E2,
thin = 3)#,
stan_ac(fit, pars = c("mu", "sig2", "sig2a"))
fit <- sampling(sm, data = data_stan, chains = 2, iter = 5E2, warmup = 4E2,
thin = 3)#,
p
fit <- sampling(sm, data = data_stan, chains = 2, iter = 5E2, warmup = 4E2,
thin = p)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 5E2, warmup = 4E2,
thin = 5)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 5E2, warmup = 4E2,
thin = 1)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 6E2, warmup = 5E2,
thin = 1)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 6E2, warmup = 5E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 7E2, warmup = 5E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 7E2, warmup = 1E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 7E2, warmup = 2E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 7E2, warmup = 2E2,
thin = 1)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 7E2, warmup = 2E2,
thin = 1)#,
#pars = "mu")
fit
y
fit <- sampling(sm, data = data_stan, chains = 2, iter = 7E2, warmup = 3E2,
thin = 1)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 4, iter = 7E2, warmup = 3E2,
thin = 1)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 8E2, warmup = 2E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 8E2, warmup = 3E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
#pars = "mu")
fit
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
#pars = "mu")
fit
# Example
y <- rlmm(n = 20, p = 10, mu = 50, sig2 = 2, sig2a = 1)
data_stan <- list(N = n*p,
p = p,
subj = subj,
y = y,
mu0 = 0,
sig2mu = 1E2,
a1 = 2.1,
b1 = 4,
a2 = 2.1,
b2 = 4
)
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1)#,
fit <- sampling(sm, data = data_stan, chains = 2, iter = 9E2, warmup = 3E2,
thin = 1,
pars = "mu")
fit
# acessando o Rhat de 'mu'
summary(fit, pars = "mu")$summary[10]
summary(fit)
summary(fit)$summary[10]
#' @param prep
#' @param chains
#' @param iter
#' @param plot
#' @param ...
#'
#' @return
#' @export
#'
#' @examples
oss.lmm.mu <- function(n, c, mu0 = 0, sig2mu = 1E2, a1 = 2.1, b1 = 4,
a2 = 2.1, b2 = 4, lrep = 5E1, pmax = 5E2,  pby = 1E2,
prep = 3, chains = 2, iter = 1E3, nburn = 1E2, thin = 1,
plot = TRUE, ...) {
cl <- match.call()
ps <- rep(seq(3, pmax, pby), each = prep)
risk <- numeric(length(ps))
m.rhat <- numeric(length(ps))
pb <- txtProgressBar(min = 1, max = length(risk), style = 3)
for(i in 1:length(risk)) {
loss <- numeric(lrep)
rhat <- numeric(lrep)
subj <- rep(1:ps[i], n)
for (j in 1:lrep) {
mu <- rnorm(1, mu0, sqrt(sig2mu))
sig2a <- 1/rgamma(1, shape = a1, rate = b1)
sig2 <- 1/rgamma(1, shape = a2, rate = b2)
y <- rlmm(n = n, p = ps[i], mu = mu, sig2 = sig2, sig2a = sig2a)
data_stan <- list(N = n*ps[i], p = ps[i], subj = subj, y = y, mu0 = mu0,
sig2mu = sig2mu, a1 = a1, b1 = b1, a2 = a2, b2 = b2)
fit <- rstan::sampling(stanmodels$lmm, data = data_stan, pars = "mu",
chains = chains, iter = iter, warmup = nburn,
thin = thin, refresh = 0)
mu.pos <- as.vector(rstan::extract(fit, pars = "mu")$mu)
loss[j] <- var(mu.pos) + c*n*ps[i]
rhat[j] <- summary(fit, pars = "mu")$summary[10]
}
risk[i] <- mean(loss)
m.hat[i] <- max(rhat)
setTxtProgressBar(pb, i)
}
Y <- log(risk - c*ps)
mod <- stats::lm(Y ~ I(log(ps + 1)))
E <- as.numeric(exp(mod$coef[1]))
G <- as.numeric(-mod$coef[2])
popt <- ceiling((E*G/c)^(1/(G + 1))-1)
if (plot == TRUE) {
plot(ps, risk, xlim = c(0, pmax), ylim = c(min(risk) - 0.5, max(risk) + 0.5), xlab = "p", ylab = "TC(p)")
curve <- function(x) {c*x + E/(1 + x)^G}
plot(function(x) curve(x), 0, pmax, col = "blue", lty = 2, add = TRUE)
graphics::abline(v = popt, col = "red")
}
# Output
cat("\nCall:\n")
print(cl)
cat("\nOptimal number of subjects:\n")
cat("p  = ", popt, "\n")
cat("Rhat = ", mean(m.hat), sd(m.hat), "\n")
}
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
library(rstantools)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
caminho_pacote <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/R package/osslmm"
# atualizando config de .stan files quando alterados
rstan_config(pkgdir = caminho_pacote)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
warnings()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
# licenca
usethis::use_mit_license(copyright_holder = "Eliardo G. Costa")
# atualizando config de .stan files quando alterados
rstan_config(pkgdir = caminho_pacote)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
# atualizando config de .stan files quando alterados
rstan_config(pkgdir = caminho_pacote)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
oss.lmm.mu
# atualizando config de .stan files quando alterados
rstan_config(pkgdir = caminho_pacote)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
warnings()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
oss.lmm.mu
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
warnings()
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
rm(list = c("oss.lmm.mu", "rlmm"))
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 1E1, prep = 1)
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.01, pmax = 1E2, pby = 25, prep = 1)
oss.lmm.mu(n = 10, c = 0.001, pmax = 1E2, pby = 25, prep = 1)
warnings()
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
caminho_pacote <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/R package/osslmm"
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu
8E1
oss.lmm.mu(n = 10, c = 0.001, pmax = 85, pby = 5, prep = 1)
# testando pacote
library(osslmm)
oss.lmm.mu
oss.lmm.mu(n = 10, c = 0.001, pmax = 80, pby = 10, prep = 1)
oss.lmm.mu(n = 10, c = 0.001, pmax = 500, pby = 50, prep = 1)
getOption("mc.cores", 1L)
?getOption
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
caminho_pacote <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/R package/osslmm"
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.001, pmax = 500, pby = 50, prep = 1, cores = 3)
oss.lmm.mu(n = 10, c = 0.001, pmax = 500, pby = 50, prep = 1, chains = 3, cores = 3)
caminho_pacote <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/R package/osslmm"
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.1, pmax = 80, pby = 25, prep = 1)
oss.lmm.mu(n = 10, c = 0.1, pmax = 80, pby = 25, prep = 1)
oss.lmm.mu(n = 10, c = 0.001, pmax = 80, pby = 10, prep = 1)
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu(n = 10, c = 0.1, pmax = 80, pby = 25, prep = 1)
oss.lmm.mu(n = 10, c = 0.001, pmax = 80, pby = 10, prep = 1)
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
caminho_pacote <- "/home/eliardocosta/Dropbox/eliardo/Documentos/Trabalho/Pesquisa/Projetos/Em andamento/Costa & Marques (2019+)/R package/osslmm"
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
Sys.time()
fim <- Sys.time(); fim - ini
ini <- Sys.time()
fim <- Sys.time(); fim - ini
ini <- Sys.time()
oss.lmm.mu(n = 10, c = 0.01, pmax = 40, pby = 5, prep = 3)
fim <- Sys.time(); fim - ini
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
ini <- Sys.time()
oss.lmm.mu(n = 10, c = 0.01, pmax = 40, pby = 5, prep = 1)
fim <- Sys.time(); fim - ini
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
ini <- Sys.time()
oss.lmm.mu(n = 10, c = 0.01, pmax = 30, pby = 10, prep = 1)
fim <- Sys.time(); fim - ini
oss.lmm.mu
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu
# atualizando estrutura do pacote
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
# instalando pacote
install.packages(caminho_pacote, repos = NULL, type = "source")
# testando pacote
library(osslmm)
oss.lmm.mu
ini <- Sys.time()
oss.lmm.mu(n = 10, c = 0.01, pmax = 30, pby = 10, prep = 1)
fim <- Sys.time(); fim - ini
